<!-- ... (todo o HTML do seu arquivo cart.html) ... -->

<!-- Adicione este Modal do Bootstrap no final do seu body, antes dos scripts -->
<div class="modal fade" id="pixModal" tabindex="-1" aria-labelledby="pixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pixModalLabel">Pague com PIX</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p>Escaneie o QR Code com o app do seu banco:</p>
                <!-- O QR Code será gerado aqui por uma biblioteca -->
                <div id="qrcode-container" class="mb-3"></div>
                <p class="fw-bold">Valor: <span id="pix-amount"></span></p>
                <hr>
                <p>Ou use o PIX Copia e Cola:</p>
                <div class="input-group">
                    <input type="text" id="pix-brcode" class="form-control" readonly>
                    <button class="btn btn-outline-secondary" id="copy-pix-btn">
                        <i class="bi bi-clipboard"></i> Copiar
                    </button>
                </div>
                <div id="copy-success-message" class="text-success mt-2 d-none">Código copiado!</div>
            </div>
        </div>
    </div>
</div>

<!-- Inclua a biblioteca para gerar o QR Code -->
<script src="https://cdn.jsdelivr.net/npm/qrcode-generator/qrcode.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const cartItemsContainer = document.getElementById('cart-items-container');
        const cartTotalElement = document.getElementById('cart-total');
        const clearCartButton = document.getElementById('clearCartButton');
        const backButton = document.getElementById('backButton');
        const finishButton = document.getElementById('finish');

        const currentStoreId = document.getElementById('storeIdData').value;
        const cartKey = `cartItems_${currentStoreId}`;

        const getCart = () => JSON.parse(sessionStorage.getItem(cartKey)) || [];

        const renderCart = () => {
            const cart = getCart();
            let totalPrice = 0;
            cartItemsContainer.innerHTML = '';

            if (cart.length > 0) {
                cart.forEach(item => {
                    const itemSubtotal = item.price * item.quantity;
                    totalPrice += itemSubtotal;
                    const cardHtml = `
                        <div class="card mb-2 cart-item-card">
                            <div class="card-body d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="card-title mb-0">${item.name} <span class="badge bg-secondary">x${item.quantity}</span></h5>
                                    <small class="text-muted">ID: ${item.id}</small>
                                </div>
                                <p class="card-text fw-bold mb-0">${new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(itemSubtotal)}</p>
                            </div>
                        </div>`;
                    cartItemsContainer.insertAdjacentHTML('beforeend', cardHtml);
                });
                finishButton.classList.remove('disabled');
            } else {
                cartItemsContainer.innerHTML = `
                    <div class="text-center my-5">
                        <img src="/images/EmptyCart.png" alt="Carrinho Vazio" class="img-fluid" style="max-width: 150px;">
                        <p class="mt-3 fs-5 text-muted">Seu carrinho está vazio.</p>
                    </div>`;
                finishButton.classList.add('disabled');
            }
            const formattedTotalPrice = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(totalPrice);
            cartTotalElement.textContent = `Total: ${formattedTotalPrice}`;
        };

        renderCart();

        // --- LÓGICA DO CHECKOUT SEGURO ---
        finishButton.addEventListener('click', async (event) => {
            event.preventDefault();
            if (finishButton.classList.contains('disabled')) return;

            const cartItems = getCart().map(item => ({ id: item.id, quantity: item.quantity }));

            try {
                const response = await fetch(`/${currentStoreId}/api/checkout`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(cartItems)
                });

                if (response.ok) {
                    const pixData = await response.json();
                    displayPixModal(pixData.brCode, pixData.totalAmount);
                } else {
                    const errorText = await response.text();
                    alert(`Erro ao finalizar a compra: ${errorText}`);
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                alert('Não foi possível conectar ao servidor. Tente novamente.');
            }
        });

        function displayPixModal(brCode, totalAmount) {
            const pixModal = new bootstrap.Modal(document.getElementById('pixModal'));
            const qrContainer = document.getElementById('qrcode-container');
            const amountElement = document.getElementById('pix-amount');
            const brCodeInput = document.getElementById('pix-brcode');
            const copyBtn = document.getElementById('copy-pix-btn');
            const copySuccessMsg = document.getElementById('copy-success-message');

            // Preenche os dados no modal
            amountElement.textContent = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(totalAmount);
            brCodeInput.value = brCode;
            qrContainer.innerHTML = ''; // Limpa QR code antigo

            // Gera o novo QR Code
            const typeNumber = 0; // Auto-detect
            const errorCorrectionLevel = 'L';
            const qr = qrcode(typeNumber, errorCorrectionLevel);
            qr.addData(brCode);
            qr.make();
            qrContainer.innerHTML = qr.createImgTag(4, 8); // (tamanho do módulo, margem)

            copyBtn.onclick = () => {
                brCodeInput.select();
                document.execCommand('copy');
                copySuccessMsg.classList.remove('d-none');
                setTimeout(() => copySuccessMsg.classList.add('d-none'), 2000);
            };

            pixModal.show();
        }

        if (clearCartButton) {
            clearCartButton.addEventListener('click', () => {
                if (confirm('Tem certeza que deseja remover todos os itens do carrinho?')) {
                    sessionStorage.removeItem(cartKey);
                    renderCart();
                }
            });
        }

        if (backButton) {
            backButton.addEventListener('click', (event) => {
                event.preventDefault();
                window.history.back();
            });
        }
    });
</script>